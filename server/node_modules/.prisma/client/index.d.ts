import {
  DMMF,
  DMMFClass,
  Engine,
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  sqltag as sql,
  empty,
  join,
  raw,
  Sql,
  Decimal,
} from '@prisma/client/runtime';

export { PrismaClientKnownRequestError }
export { PrismaClientUnknownRequestError }
export { PrismaClientRustPanicError }
export { PrismaClientInitializationError }
export { PrismaClientValidationError }
export { Decimal }

/**
 * Re-export of sql-template-tag
 */
export { sql, empty, join, raw, Sql }

/**
 * Prisma Client JS version: 2.11.0
 * Query Engine version: cf0680a1bfe8d5e743dc659cc7f08009f9587d58
 */
export declare type PrismaVersion = {
  client: string
}

export declare const prismaVersion: PrismaVersion 

/**
 * Utility Types
 */

/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON object.
 * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
 */
export declare type JsonObject = {[Key in string]?: JsonValue}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON array.
 */
export declare interface JsonArray extends Array<JsonValue> {}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches any valid JSON value.
 */
export declare type JsonValue = string | number | boolean | null | JsonObject | JsonArray

/**
 * Same as JsonObject, but allows undefined
 */
export declare type InputJsonObject = {[Key in string]?: JsonValue}
 
export declare interface InputJsonArray extends Array<JsonValue> {}
 
export declare type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray

declare type SelectAndInclude = {
  select: any
  include: any
}

declare type HasSelect = {
  select: any
}

declare type HasInclude = {
  include: any
}

declare type CheckSelect<T, S, U> = T extends SelectAndInclude
  ? 'Please either choose `select` or `include`'
  : T extends HasSelect
  ? U
  : T extends HasInclude
  ? U
  : S

/**
 * Get the type of the value, that the Promise holds.
 */
export declare type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

/**
 * Get the return type of a function which returns a Promise.
 */
export declare type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>


export declare type Enumerable<T> = T | Array<T>;

export type RequiredKeys<T> = {
  [K in keyof T]-?: {} extends Pick<T, K> ? never : K
}[keyof T]

export declare type TruthyKeys<T> = {
  [key in keyof T]: T[key] extends false | undefined | null ? never : key
}[keyof T]

export declare type TrueKeys<T> = TruthyKeys<Pick<T, RequiredKeys<T>>>

/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export declare type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};

type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };
/**
 * XOR is needed to have a real mutually exclusive union type
 * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
 */
type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;

declare class PrismaClientFetcher {
  private readonly prisma;
  private readonly debug;
  private readonly hooks?;
  constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
  request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
  sanitizeMessage(message: string): string;
  protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
}


/**
 * Client
**/

export declare type Datasource = {
  url?: string
}

export type Datasources = {
  db?: Datasource
}

export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

export interface PrismaClientOptions {
  /**
   * Overwrites the datasource url from your prisma.schema file
   */
  datasources?: Datasources

  /**
   * @default "colorless"
   */
  errorFormat?: ErrorFormat

  /**
   * @example
   * ```
   * // Defaults to stdout
   * log: ['query', 'info', 'warn', 'error']
   * 
   * // Emit as events
   * log: [
   *  { emit: 'stdout', level: 'query' },
   *  { emit: 'stdout', level: 'info' },
   *  { emit: 'stdout', level: 'warn' }
   *  { emit: 'stdout', level: 'error' }
   * ]
   * ```
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
   */
  log?: Array<LogLevel | LogDefinition>
}

export type Hooks = {
  beforeRequest?: (options: {query: string, path: string[], rootField?: string, typeName?: string, document: any}) => any
}

/* Types for Logging */
export type LogLevel = 'info' | 'query' | 'warn' | 'error'
export type LogDefinition = {
  level: LogLevel
  emit: 'stdout' | 'event'
}

export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
  GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
  : never

export type QueryEvent = {
  timestamp: Date
  query: string
  params: string
  duration: number
  target: string
}

export type LogEvent = {
  timestamp: Date
  message: string
  target: string
}
/* End Types for Logging */


export type PrismaAction =
  | 'findOne'
  | 'findMany'
  | 'findFirst'
  | 'create'
  | 'update'
  | 'updateMany'
  | 'upsert'
  | 'delete'
  | 'deleteMany'
  | 'executeRaw'
  | 'queryRaw'
  | 'aggregate'


/**
 * These options are being passed in to the middleware as "params"
 */
export type MiddlewareParams = {
  model?: ModelName
  action: PrismaAction
  args: any
  dataPath: string[]
  runInTransaction: boolean
}

/**
 * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
 */
export type Middleware<T = any> = (
  params: MiddlewareParams,
  next: (params: MiddlewareParams) => Promise<T>,
) => Promise<T>

// tested in getLogLevel.test.ts
export declare function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Projects
 * const projects = await prisma.project.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export declare class PrismaClient<
  T extends PrismaClientOptions = PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<LogLevel | LogDefinition> ? GetEvents<T['log']> : never : never
> {
  /**
   * @private
   */
  private fetcher;
  /**
   * @private
   */
  private readonly dmmf;
  /**
   * @private
   */
  private connectionPromise?;
  /**
   * @private
   */
  private disconnectionPromise?;
  /**
   * @private
   */
  private readonly engineConfig;
  /**
   * @private
   */
  private readonly measurePerformance;
  /**
   * @private
   */
  private engine: Engine;
  /**
   * @private
   */
  private errorFormat: ErrorFormat;

  /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Projects
   * const projects = await prisma.project.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */
  constructor(optionsArg?: T);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? QueryEvent : LogEvent) => void): void;
  /**
   * @deprecated renamed to `$on`
   */
  on<V extends U>(eventType: V, callback: (event: V extends 'query' ? QueryEvent : LogEvent) => void): void;
  /**
   * Connect with the database
   */
  $connect(): Promise<void>;
  /**
   * @deprecated renamed to `$connect`
   */
  connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;
  /**
   * @deprecated renamed to `$disconnect`
   */
  disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.executeRaw``, values will be escaped automatically
   * const result = await prisma.executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw<T = any>(query: string | TemplateStringsArray | Sql, ...values: any[]): Promise<number>;

  /**
   * @deprecated renamed to `$executeRaw`
   */
  executeRaw<T = any>(query: string | TemplateStringsArray | Sql, ...values: any[]): Promise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.queryRaw``, values will be escaped automatically
   * const result = await prisma.queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw<T = any>(query: string | TemplateStringsArray | Sql, ...values: any[]): Promise<T>;
 
  /**
   * @deprecated renamed to `$queryRaw`
   */
  queryRaw<T = any>(query: string | TemplateStringsArray | Sql, ...values: any[]): Promise<T>;
  /**
   * Execute queries in a transaction
   * @example
   * ```
   * const [george, bob, alice] = await prisma.transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   */
  $transaction: PromiseConstructor['all']
  /**
   * @deprecated renamed to `$transaction`
   */
  transaction: PromiseConstructor['all']

  /**
   * `prisma.project`: Exposes CRUD operations for the **Project** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Projects
    * const projects = await prisma.project.findMany()
    * ```
    */
  get project(): ProjectDelegate;

  /**
   * `prisma.task`: Exposes CRUD operations for the **Task** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tasks
    * const tasks = await prisma.task.findMany()
    * ```
    */
  get task(): TaskDelegate;
}



/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export declare const ModelName: {
  Project: 'Project',
  Task: 'Task'
};

export declare type ModelName = (typeof ModelName)[keyof typeof ModelName]


export declare const ProjectDistinctFieldEnum: {
  id: 'id',
  createdAt: 'createdAt',
  title: 'title',
  description: 'description',
  totalTime: 'totalTime'
};

export declare type ProjectDistinctFieldEnum = (typeof ProjectDistinctFieldEnum)[keyof typeof ProjectDistinctFieldEnum]


export declare const TaskDistinctFieldEnum: {
  id: 'id',
  createdAt: 'createdAt',
  title: 'title',
  time: 'time',
  projectId: 'projectId'
};

export declare type TaskDistinctFieldEnum = (typeof TaskDistinctFieldEnum)[keyof typeof TaskDistinctFieldEnum]


export declare const SortOrder: {
  asc: 'asc',
  desc: 'desc'
};

export declare type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]



/**
 * Model Project
 */

export type Project = {
  id: number
  createdAt: Date
  title: string
  description: string
  totalTime: number
}


export type AggregateProject = {
  count: number
  avg: ProjectAvgAggregateOutputType | null
  sum: ProjectSumAggregateOutputType | null
  min: ProjectMinAggregateOutputType | null
  max: ProjectMaxAggregateOutputType | null
}

export type ProjectAvgAggregateOutputType = {
  id: number
  totalTime: number
}

export type ProjectSumAggregateOutputType = {
  id: number
  totalTime: number
}

export type ProjectMinAggregateOutputType = {
  id: number
  totalTime: number
}

export type ProjectMaxAggregateOutputType = {
  id: number
  totalTime: number
}


export type ProjectAvgAggregateInputType = {
  id?: true
  totalTime?: true
}

export type ProjectSumAggregateInputType = {
  id?: true
  totalTime?: true
}

export type ProjectMinAggregateInputType = {
  id?: true
  totalTime?: true
}

export type ProjectMaxAggregateInputType = {
  id?: true
  totalTime?: true
}

export type AggregateProjectArgs = {
  where?: ProjectWhereInput
  orderBy?: XOR<Enumerable<ProjectOrderByInput>, ProjectOrderByInput>
  cursor?: ProjectWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<ProjectDistinctFieldEnum>
  count?: true
  avg?: ProjectAvgAggregateInputType
  sum?: ProjectSumAggregateInputType
  min?: ProjectMinAggregateInputType
  max?: ProjectMaxAggregateInputType
}

export type GetProjectAggregateType<T extends AggregateProjectArgs> = {
  [P in keyof T]: P extends 'count' ? number : GetProjectAggregateScalarType<T[P]>
}

export type GetProjectAggregateScalarType<T extends any> = {
  [P in keyof T]: P extends keyof ProjectAvgAggregateOutputType ? ProjectAvgAggregateOutputType[P] : never
}
    
    

export type ProjectSelect = {
  id?: boolean
  createdAt?: boolean
  title?: boolean
  description?: boolean
  totalTime?: boolean
  tasks?: boolean | FindManyTaskArgs
}

export type ProjectInclude = {
  tasks?: boolean | FindManyTaskArgs
}

export type ProjectGetPayload<
  S extends boolean | null | undefined | ProjectArgs,
  U = keyof S
> = S extends true
  ? Project
  : S extends undefined
  ? never
  : S extends ProjectArgs | FindManyProjectArgs
  ? 'include' extends U
    ? Project  & {
      [P in TrueKeys<S['include']>]:
      P extends 'tasks'
      ? Array<TaskGetPayload<S['include'][P]>> : never
    }
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof Project ? Project[P]
: 
      P extends 'tasks'
      ? Array<TaskGetPayload<S['select'][P]>> : never
    }
  : Project
: Project


export interface ProjectDelegate {
  /**
   * Find zero or one Project that matches the filter.
   * @param {FindOneProjectArgs} args - Arguments to find a Project
   * @example
   * // Get one Project
   * const project = await prisma.project.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneProjectArgs>(
    args: Subset<T, FindOneProjectArgs>
  ): CheckSelect<T, Prisma__ProjectClient<Project | null>, Prisma__ProjectClient<ProjectGetPayload<T> | null>>
  /**
   * Find the first Project that matches the filter.
   * @param {FindFirstProjectArgs} args - Arguments to find a Project
   * @example
   * // Get one Project
   * const project = await prisma.project.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findFirst<T extends FindFirstProjectArgs>(
    args?: Subset<T, FindFirstProjectArgs>
  ): CheckSelect<T, Prisma__ProjectClient<Project | null>, Prisma__ProjectClient<ProjectGetPayload<T> | null>>
  /**
   * Find zero or more Projects that matches the filter.
   * @param {FindManyProjectArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Projects
   * const projects = await prisma.project.findMany()
   * 
   * // Get first 10 Projects
   * const projects = await prisma.project.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const projectWithIdOnly = await prisma.project.findMany({ select: { id: true } })
   * 
  **/
  findMany<T extends FindManyProjectArgs>(
    args?: Subset<T, FindManyProjectArgs>
  ): CheckSelect<T, Promise<Array<Project>>, Promise<Array<ProjectGetPayload<T>>>>
  /**
   * Create a Project.
   * @param {ProjectCreateArgs} args - Arguments to create a Project.
   * @example
   * // Create one Project
   * const Project = await prisma.project.create({
   *   data: {
   *     // ... data to create a Project
   *   }
   * })
   * 
  **/
  create<T extends ProjectCreateArgs>(
    args: Subset<T, ProjectCreateArgs>
  ): CheckSelect<T, Prisma__ProjectClient<Project>, Prisma__ProjectClient<ProjectGetPayload<T>>>
  /**
   * Delete a Project.
   * @param {ProjectDeleteArgs} args - Arguments to delete one Project.
   * @example
   * // Delete one Project
   * const Project = await prisma.project.delete({
   *   where: {
   *     // ... filter to delete one Project
   *   }
   * })
   * 
  **/
  delete<T extends ProjectDeleteArgs>(
    args: Subset<T, ProjectDeleteArgs>
  ): CheckSelect<T, Prisma__ProjectClient<Project>, Prisma__ProjectClient<ProjectGetPayload<T>>>
  /**
   * Update one Project.
   * @param {ProjectUpdateArgs} args - Arguments to update one Project.
   * @example
   * // Update one Project
   * const project = await prisma.project.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends ProjectUpdateArgs>(
    args: Subset<T, ProjectUpdateArgs>
  ): CheckSelect<T, Prisma__ProjectClient<Project>, Prisma__ProjectClient<ProjectGetPayload<T>>>
  /**
   * Delete zero or more Projects.
   * @param {ProjectDeleteManyArgs} args - Arguments to filter Projects to delete.
   * @example
   * // Delete a few Projects
   * const { count } = await prisma.project.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends ProjectDeleteManyArgs>(
    args: Subset<T, ProjectDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Projects.
   * @param {ProjectUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Projects
   * const project = await prisma.project.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends ProjectUpdateManyArgs>(
    args: Subset<T, ProjectUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one Project.
   * @param {ProjectUpsertArgs} args - Arguments to update or create a Project.
   * @example
   * // Update or create a Project
   * const project = await prisma.project.upsert({
   *   create: {
   *     // ... data to create a Project
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Project we want to update
   *   }
   * })
  **/
  upsert<T extends ProjectUpsertArgs>(
    args: Subset<T, ProjectUpsertArgs>
  ): CheckSelect<T, Prisma__ProjectClient<Project>, Prisma__ProjectClient<ProjectGetPayload<T>>>
  /**
   * Count
   */
  count(args?: Omit<FindManyProjectArgs, 'select' | 'include'>): Promise<number>

  /**
   * Aggregate
   */
  aggregate<T extends AggregateProjectArgs>(args: Subset<T, AggregateProjectArgs>): Promise<GetProjectAggregateType<T>>
}

/**
 * The delegate class that acts as a "Promise-like" for Project.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__ProjectClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';

  tasks<T extends FindManyTaskArgs = {}>(args?: Subset<T, FindManyTaskArgs>): CheckSelect<T, Promise<Array<Task>>, Promise<Array<TaskGetPayload<T>>>>;

  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * Project findOne
 */
export type FindOneProjectArgs = {
  /**
   * Select specific fields to fetch from the Project
  **/
  select?: XOR<ProjectSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<ProjectInclude, null>
  /**
   * Filter, which Project to fetch.
  **/
  where: ProjectWhereUniqueInput
}


/**
 * Project findFirst
 */
export type FindFirstProjectArgs = {
  /**
   * Select specific fields to fetch from the Project
  **/
  select?: XOR<ProjectSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<ProjectInclude, null>
  /**
   * Filter, which Project to fetch.
  **/
  where?: ProjectWhereInput
  orderBy?: XOR<Enumerable<ProjectOrderByInput>, ProjectOrderByInput>
  cursor?: ProjectWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<ProjectDistinctFieldEnum>
}


/**
 * Project findMany
 */
export type FindManyProjectArgs = {
  /**
   * Select specific fields to fetch from the Project
  **/
  select?: XOR<ProjectSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<ProjectInclude, null>
  /**
   * Filter, which Projects to fetch.
  **/
  where?: ProjectWhereInput
  /**
   * Determine the order of the Projects to fetch.
  **/
  orderBy?: XOR<Enumerable<ProjectOrderByInput>, ProjectOrderByInput>
  /**
   * Sets the position for listing Projects.
  **/
  cursor?: ProjectWhereUniqueInput
  /**
   * The number of Projects to fetch. If negative number, it will take Projects before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` Projects.
  **/
  skip?: number
  distinct?: Enumerable<ProjectDistinctFieldEnum>
}


/**
 * Project create
 */
export type ProjectCreateArgs = {
  /**
   * Select specific fields to fetch from the Project
  **/
  select?: XOR<ProjectSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<ProjectInclude, null>
  /**
   * The data needed to create a Project.
  **/
  data: ProjectCreateInput
}


/**
 * Project update
 */
export type ProjectUpdateArgs = {
  /**
   * Select specific fields to fetch from the Project
  **/
  select?: XOR<ProjectSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<ProjectInclude, null>
  /**
   * The data needed to update a Project.
  **/
  data: ProjectUpdateInput
  /**
   * Choose, which Project to update.
  **/
  where: ProjectWhereUniqueInput
}


/**
 * Project updateMany
 */
export type ProjectUpdateManyArgs = {
  data: ProjectUpdateManyMutationInput
  where?: ProjectWhereInput
}


/**
 * Project upsert
 */
export type ProjectUpsertArgs = {
  /**
   * Select specific fields to fetch from the Project
  **/
  select?: XOR<ProjectSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<ProjectInclude, null>
  /**
   * The filter to search for the Project to update in case it exists.
  **/
  where: ProjectWhereUniqueInput
  /**
   * In case the Project found by the `where` argument doesn't exist, create a new Project with this data.
  **/
  create: ProjectCreateInput
  /**
   * In case the Project was found with the provided `where` argument, update it with this data.
  **/
  update: ProjectUpdateInput
}


/**
 * Project delete
 */
export type ProjectDeleteArgs = {
  /**
   * Select specific fields to fetch from the Project
  **/
  select?: XOR<ProjectSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<ProjectInclude, null>
  /**
   * Filter which Project to delete.
  **/
  where: ProjectWhereUniqueInput
}


/**
 * Project deleteMany
 */
export type ProjectDeleteManyArgs = {
  where?: ProjectWhereInput
}


/**
 * Project without action
 */
export type ProjectArgs = {
  /**
   * Select specific fields to fetch from the Project
  **/
  select?: XOR<ProjectSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<ProjectInclude, null>
}



/**
 * Model Task
 */

export type Task = {
  id: number
  createdAt: Date
  title: string
  time: number
  projectId: number | null
}


export type AggregateTask = {
  count: number
  avg: TaskAvgAggregateOutputType | null
  sum: TaskSumAggregateOutputType | null
  min: TaskMinAggregateOutputType | null
  max: TaskMaxAggregateOutputType | null
}

export type TaskAvgAggregateOutputType = {
  id: number
  time: number
  projectId: number | null
}

export type TaskSumAggregateOutputType = {
  id: number
  time: number
  projectId: number | null
}

export type TaskMinAggregateOutputType = {
  id: number
  time: number
  projectId: number | null
}

export type TaskMaxAggregateOutputType = {
  id: number
  time: number
  projectId: number | null
}


export type TaskAvgAggregateInputType = {
  id?: true
  time?: true
  projectId?: true
}

export type TaskSumAggregateInputType = {
  id?: true
  time?: true
  projectId?: true
}

export type TaskMinAggregateInputType = {
  id?: true
  time?: true
  projectId?: true
}

export type TaskMaxAggregateInputType = {
  id?: true
  time?: true
  projectId?: true
}

export type AggregateTaskArgs = {
  where?: TaskWhereInput
  orderBy?: XOR<Enumerable<TaskOrderByInput>, TaskOrderByInput>
  cursor?: TaskWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<TaskDistinctFieldEnum>
  count?: true
  avg?: TaskAvgAggregateInputType
  sum?: TaskSumAggregateInputType
  min?: TaskMinAggregateInputType
  max?: TaskMaxAggregateInputType
}

export type GetTaskAggregateType<T extends AggregateTaskArgs> = {
  [P in keyof T]: P extends 'count' ? number : GetTaskAggregateScalarType<T[P]>
}

export type GetTaskAggregateScalarType<T extends any> = {
  [P in keyof T]: P extends keyof TaskAvgAggregateOutputType ? TaskAvgAggregateOutputType[P] : never
}
    
    

export type TaskSelect = {
  id?: boolean
  createdAt?: boolean
  title?: boolean
  time?: boolean
  project?: boolean | ProjectArgs
  projectId?: boolean
}

export type TaskInclude = {
  project?: boolean | ProjectArgs
}

export type TaskGetPayload<
  S extends boolean | null | undefined | TaskArgs,
  U = keyof S
> = S extends true
  ? Task
  : S extends undefined
  ? never
  : S extends TaskArgs | FindManyTaskArgs
  ? 'include' extends U
    ? Task  & {
      [P in TrueKeys<S['include']>]:
      P extends 'project'
      ? ProjectGetPayload<S['include'][P]> | null : never
    }
  : 'select' extends U
    ? {
      [P in TrueKeys<S['select']>]:P extends keyof Task ? Task[P]
: 
      P extends 'project'
      ? ProjectGetPayload<S['select'][P]> | null : never
    }
  : Task
: Task


export interface TaskDelegate {
  /**
   * Find zero or one Task that matches the filter.
   * @param {FindOneTaskArgs} args - Arguments to find a Task
   * @example
   * // Get one Task
   * const task = await prisma.task.findOne({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findOne<T extends FindOneTaskArgs>(
    args: Subset<T, FindOneTaskArgs>
  ): CheckSelect<T, Prisma__TaskClient<Task | null>, Prisma__TaskClient<TaskGetPayload<T> | null>>
  /**
   * Find the first Task that matches the filter.
   * @param {FindFirstTaskArgs} args - Arguments to find a Task
   * @example
   * // Get one Task
   * const task = await prisma.task.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
  **/
  findFirst<T extends FindFirstTaskArgs>(
    args?: Subset<T, FindFirstTaskArgs>
  ): CheckSelect<T, Prisma__TaskClient<Task | null>, Prisma__TaskClient<TaskGetPayload<T> | null>>
  /**
   * Find zero or more Tasks that matches the filter.
   * @param {FindManyTaskArgs=} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Tasks
   * const tasks = await prisma.task.findMany()
   * 
   * // Get first 10 Tasks
   * const tasks = await prisma.task.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const taskWithIdOnly = await prisma.task.findMany({ select: { id: true } })
   * 
  **/
  findMany<T extends FindManyTaskArgs>(
    args?: Subset<T, FindManyTaskArgs>
  ): CheckSelect<T, Promise<Array<Task>>, Promise<Array<TaskGetPayload<T>>>>
  /**
   * Create a Task.
   * @param {TaskCreateArgs} args - Arguments to create a Task.
   * @example
   * // Create one Task
   * const Task = await prisma.task.create({
   *   data: {
   *     // ... data to create a Task
   *   }
   * })
   * 
  **/
  create<T extends TaskCreateArgs>(
    args: Subset<T, TaskCreateArgs>
  ): CheckSelect<T, Prisma__TaskClient<Task>, Prisma__TaskClient<TaskGetPayload<T>>>
  /**
   * Delete a Task.
   * @param {TaskDeleteArgs} args - Arguments to delete one Task.
   * @example
   * // Delete one Task
   * const Task = await prisma.task.delete({
   *   where: {
   *     // ... filter to delete one Task
   *   }
   * })
   * 
  **/
  delete<T extends TaskDeleteArgs>(
    args: Subset<T, TaskDeleteArgs>
  ): CheckSelect<T, Prisma__TaskClient<Task>, Prisma__TaskClient<TaskGetPayload<T>>>
  /**
   * Update one Task.
   * @param {TaskUpdateArgs} args - Arguments to update one Task.
   * @example
   * // Update one Task
   * const task = await prisma.task.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  update<T extends TaskUpdateArgs>(
    args: Subset<T, TaskUpdateArgs>
  ): CheckSelect<T, Prisma__TaskClient<Task>, Prisma__TaskClient<TaskGetPayload<T>>>
  /**
   * Delete zero or more Tasks.
   * @param {TaskDeleteManyArgs} args - Arguments to filter Tasks to delete.
   * @example
   * // Delete a few Tasks
   * const { count } = await prisma.task.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
  **/
  deleteMany<T extends TaskDeleteManyArgs>(
    args: Subset<T, TaskDeleteManyArgs>
  ): Promise<BatchPayload>
  /**
   * Update zero or more Tasks.
   * @param {TaskUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Tasks
   * const task = await prisma.task.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
  **/
  updateMany<T extends TaskUpdateManyArgs>(
    args: Subset<T, TaskUpdateManyArgs>
  ): Promise<BatchPayload>
  /**
   * Create or update one Task.
   * @param {TaskUpsertArgs} args - Arguments to update or create a Task.
   * @example
   * // Update or create a Task
   * const task = await prisma.task.upsert({
   *   create: {
   *     // ... data to create a Task
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Task we want to update
   *   }
   * })
  **/
  upsert<T extends TaskUpsertArgs>(
    args: Subset<T, TaskUpsertArgs>
  ): CheckSelect<T, Prisma__TaskClient<Task>, Prisma__TaskClient<TaskGetPayload<T>>>
  /**
   * Count
   */
  count(args?: Omit<FindManyTaskArgs, 'select' | 'include'>): Promise<number>

  /**
   * Aggregate
   */
  aggregate<T extends AggregateTaskArgs>(args: Subset<T, AggregateTaskArgs>): Promise<GetTaskAggregateType<T>>
}

/**
 * The delegate class that acts as a "Promise-like" for Task.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in 
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export declare class Prisma__TaskClient<T> implements Promise<T> {
  private readonly _dmmf;
  private readonly _fetcher;
  private readonly _queryType;
  private readonly _rootField;
  private readonly _clientMethod;
  private readonly _args;
  private readonly _dataPath;
  private readonly _errorFormat;
  private readonly _measurePerformance?;
  private _isList;
  private _callsite;
  private _requestPromise?;
  constructor(_dmmf: DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
  readonly [Symbol.toStringTag]: 'PrismaClientPromise';

  project<T extends ProjectArgs = {}>(args?: Subset<T, ProjectArgs>): CheckSelect<T, Prisma__ProjectClient<Project | null>, Prisma__ProjectClient<ProjectGetPayload<T> | null>>;

  private get _document();
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): Promise<T>;
}

// Custom InputTypes

/**
 * Task findOne
 */
export type FindOneTaskArgs = {
  /**
   * Select specific fields to fetch from the Task
  **/
  select?: XOR<TaskSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<TaskInclude, null>
  /**
   * Filter, which Task to fetch.
  **/
  where: TaskWhereUniqueInput
}


/**
 * Task findFirst
 */
export type FindFirstTaskArgs = {
  /**
   * Select specific fields to fetch from the Task
  **/
  select?: XOR<TaskSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<TaskInclude, null>
  /**
   * Filter, which Task to fetch.
  **/
  where?: TaskWhereInput
  orderBy?: XOR<Enumerable<TaskOrderByInput>, TaskOrderByInput>
  cursor?: TaskWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Enumerable<TaskDistinctFieldEnum>
}


/**
 * Task findMany
 */
export type FindManyTaskArgs = {
  /**
   * Select specific fields to fetch from the Task
  **/
  select?: XOR<TaskSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<TaskInclude, null>
  /**
   * Filter, which Tasks to fetch.
  **/
  where?: TaskWhereInput
  /**
   * Determine the order of the Tasks to fetch.
  **/
  orderBy?: XOR<Enumerable<TaskOrderByInput>, TaskOrderByInput>
  /**
   * Sets the position for listing Tasks.
  **/
  cursor?: TaskWhereUniqueInput
  /**
   * The number of Tasks to fetch. If negative number, it will take Tasks before the `cursor`.
  **/
  take?: number
  /**
   * Skip the first `n` Tasks.
  **/
  skip?: number
  distinct?: Enumerable<TaskDistinctFieldEnum>
}


/**
 * Task create
 */
export type TaskCreateArgs = {
  /**
   * Select specific fields to fetch from the Task
  **/
  select?: XOR<TaskSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<TaskInclude, null>
  /**
   * The data needed to create a Task.
  **/
  data: TaskCreateInput
}


/**
 * Task update
 */
export type TaskUpdateArgs = {
  /**
   * Select specific fields to fetch from the Task
  **/
  select?: XOR<TaskSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<TaskInclude, null>
  /**
   * The data needed to update a Task.
  **/
  data: TaskUpdateInput
  /**
   * Choose, which Task to update.
  **/
  where: TaskWhereUniqueInput
}


/**
 * Task updateMany
 */
export type TaskUpdateManyArgs = {
  data: TaskUpdateManyMutationInput
  where?: TaskWhereInput
}


/**
 * Task upsert
 */
export type TaskUpsertArgs = {
  /**
   * Select specific fields to fetch from the Task
  **/
  select?: XOR<TaskSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<TaskInclude, null>
  /**
   * The filter to search for the Task to update in case it exists.
  **/
  where: TaskWhereUniqueInput
  /**
   * In case the Task found by the `where` argument doesn't exist, create a new Task with this data.
  **/
  create: TaskCreateInput
  /**
   * In case the Task was found with the provided `where` argument, update it with this data.
  **/
  update: TaskUpdateInput
}


/**
 * Task delete
 */
export type TaskDeleteArgs = {
  /**
   * Select specific fields to fetch from the Task
  **/
  select?: XOR<TaskSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<TaskInclude, null>
  /**
   * Filter which Task to delete.
  **/
  where: TaskWhereUniqueInput
}


/**
 * Task deleteMany
 */
export type TaskDeleteManyArgs = {
  where?: TaskWhereInput
}


/**
 * Task without action
 */
export type TaskArgs = {
  /**
   * Select specific fields to fetch from the Task
  **/
  select?: XOR<TaskSelect, null>
  /**
   * Choose, which related nodes to fetch as well.
  **/
  include?: XOR<TaskInclude, null>
}



/**
 * Deep Input Types
 */


export type ProjectWhereInput = {
  AND?: XOR<ProjectWhereInput, Enumerable<ProjectWhereInput>>
  OR?: XOR<ProjectWhereInput, Enumerable<ProjectWhereInput>>
  NOT?: XOR<ProjectWhereInput, Enumerable<ProjectWhereInput>>
  id?: XOR<IntFilter, number>
  createdAt?: XOR<DateTimeFilter, Date | string>
  title?: XOR<StringFilter, string>
  description?: XOR<StringFilter, string>
  totalTime?: XOR<IntFilter, number>
  tasks?: TaskListRelationFilter
}

export type ProjectOrderByInput = {
  id?: SortOrder
  createdAt?: SortOrder
  title?: SortOrder
  description?: SortOrder
  totalTime?: SortOrder
}

export type ProjectWhereUniqueInput = {
  id?: number
}

export type TaskWhereInput = {
  AND?: XOR<TaskWhereInput, Enumerable<TaskWhereInput>>
  OR?: XOR<TaskWhereInput, Enumerable<TaskWhereInput>>
  NOT?: XOR<TaskWhereInput, Enumerable<TaskWhereInput>>
  id?: XOR<IntFilter, number>
  createdAt?: XOR<DateTimeFilter, Date | string>
  title?: XOR<StringFilter, string>
  time?: XOR<IntFilter, number>
  project?: ProjectRelationFilter | ProjectWhereInput | null
  projectId?: IntNullableFilter | number | null
}

export type TaskOrderByInput = {
  id?: SortOrder
  createdAt?: SortOrder
  title?: SortOrder
  time?: SortOrder
  projectId?: SortOrder
}

export type TaskWhereUniqueInput = {
  id?: number
}

export type ProjectCreateInput = {
  createdAt?: Date | string
  title: string
  description: string
  totalTime?: number
  tasks?: TaskCreateManyWithoutProjectInput
}

export type ProjectUpdateInput = {
  createdAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  title?: XOR<string, StringFieldUpdateOperationsInput>
  description?: XOR<string, StringFieldUpdateOperationsInput>
  totalTime?: XOR<number, IntFieldUpdateOperationsInput>
  tasks?: TaskUpdateManyWithoutProjectInput
}

export type ProjectUpdateManyMutationInput = {
  createdAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  title?: XOR<string, StringFieldUpdateOperationsInput>
  description?: XOR<string, StringFieldUpdateOperationsInput>
  totalTime?: XOR<number, IntFieldUpdateOperationsInput>
}

export type TaskCreateInput = {
  createdAt?: Date | string
  title: string
  time?: number
  project?: ProjectCreateOneWithoutTasksInput
}

export type TaskUpdateInput = {
  createdAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  title?: XOR<string, StringFieldUpdateOperationsInput>
  time?: XOR<number, IntFieldUpdateOperationsInput>
  project?: ProjectUpdateOneWithoutTasksInput
}

export type TaskUpdateManyMutationInput = {
  createdAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  title?: XOR<string, StringFieldUpdateOperationsInput>
  time?: XOR<number, IntFieldUpdateOperationsInput>
}

export type IntFilter = {
  equals?: number
  in?: Enumerable<number>
  notIn?: Enumerable<number>
  lt?: number
  lte?: number
  gt?: number
  gte?: number
  not?: XOR<number, NestedIntFilter>
}

export type DateTimeFilter = {
  equals?: Date | string
  in?: Enumerable<Date> | Enumerable<string>
  notIn?: Enumerable<Date> | Enumerable<string>
  lt?: Date | string
  lte?: Date | string
  gt?: Date | string
  gte?: Date | string
  not?: XOR<Date | string, NestedDateTimeFilter>
}

export type StringFilter = {
  equals?: string
  in?: Enumerable<string>
  notIn?: Enumerable<string>
  lt?: string
  lte?: string
  gt?: string
  gte?: string
  contains?: string
  startsWith?: string
  endsWith?: string
  not?: XOR<string, NestedStringFilter>
}

export type TaskListRelationFilter = {
  every?: TaskWhereInput
  some?: TaskWhereInput
  none?: TaskWhereInput
}

export type ProjectRelationFilter = {
  is?: XOR<ProjectWhereInput, null>
  isNot?: XOR<ProjectWhereInput, null>
}

export type IntNullableFilter = {
  equals?: XOR<number, null>
  in?: XOR<Enumerable<number>, null>
  notIn?: XOR<Enumerable<number>, null>
  lt?: number
  lte?: number
  gt?: number
  gte?: number
  not?: number | NestedIntNullableFilter | null
}

export type TaskCreateManyWithoutProjectInput = {
  create?: XOR<TaskCreateWithoutProjectInput, Enumerable<TaskCreateWithoutProjectInput>>
  connect?: XOR<TaskWhereUniqueInput, Enumerable<TaskWhereUniqueInput>>
  connectOrCreate?: XOR<TaskCreateOrConnectWithoutprojectInput, Enumerable<TaskCreateOrConnectWithoutprojectInput>>
}

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string
}

export type StringFieldUpdateOperationsInput = {
  set?: string
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type TaskUpdateManyWithoutProjectInput = {
  create?: XOR<TaskCreateWithoutProjectInput, Enumerable<TaskCreateWithoutProjectInput>>
  connect?: XOR<TaskWhereUniqueInput, Enumerable<TaskWhereUniqueInput>>
  set?: XOR<TaskWhereUniqueInput, Enumerable<TaskWhereUniqueInput>>
  disconnect?: XOR<TaskWhereUniqueInput, Enumerable<TaskWhereUniqueInput>>
  delete?: XOR<TaskWhereUniqueInput, Enumerable<TaskWhereUniqueInput>>
  update?: XOR<TaskUpdateWithWhereUniqueWithoutProjectInput, Enumerable<TaskUpdateWithWhereUniqueWithoutProjectInput>>
  updateMany?: XOR<TaskUpdateManyWithWhereWithoutProjectInput, Enumerable<TaskUpdateManyWithWhereWithoutProjectInput>>
  deleteMany?: XOR<TaskScalarWhereInput, Enumerable<TaskScalarWhereInput>>
  upsert?: XOR<TaskUpsertWithWhereUniqueWithoutProjectInput, Enumerable<TaskUpsertWithWhereUniqueWithoutProjectInput>>
  connectOrCreate?: XOR<TaskCreateOrConnectWithoutprojectInput, Enumerable<TaskCreateOrConnectWithoutprojectInput>>
}

export type ProjectCreateOneWithoutTasksInput = {
  create?: ProjectCreateWithoutTasksInput
  connect?: ProjectWhereUniqueInput
  connectOrCreate?: ProjectCreateOrConnectWithouttasksInput
}

export type ProjectUpdateOneWithoutTasksInput = {
  create?: ProjectCreateWithoutTasksInput
  connect?: ProjectWhereUniqueInput
  disconnect?: boolean
  delete?: boolean
  update?: ProjectUpdateWithoutTasksInput
  upsert?: ProjectUpsertWithoutTasksInput
  connectOrCreate?: ProjectCreateOrConnectWithouttasksInput
}

export type NestedIntFilter = {
  equals?: number
  in?: Enumerable<number>
  notIn?: Enumerable<number>
  lt?: number
  lte?: number
  gt?: number
  gte?: number
  not?: XOR<number, NestedIntFilter>
}

export type NestedDateTimeFilter = {
  equals?: Date | string
  in?: Enumerable<Date> | Enumerable<string>
  notIn?: Enumerable<Date> | Enumerable<string>
  lt?: Date | string
  lte?: Date | string
  gt?: Date | string
  gte?: Date | string
  not?: XOR<Date | string, NestedDateTimeFilter>
}

export type NestedStringFilter = {
  equals?: string
  in?: Enumerable<string>
  notIn?: Enumerable<string>
  lt?: string
  lte?: string
  gt?: string
  gte?: string
  contains?: string
  startsWith?: string
  endsWith?: string
  not?: XOR<string, NestedStringFilter>
}

export type NestedIntNullableFilter = {
  equals?: XOR<number, null>
  in?: XOR<Enumerable<number>, null>
  notIn?: XOR<Enumerable<number>, null>
  lt?: number
  lte?: number
  gt?: number
  gte?: number
  not?: number | NestedIntNullableFilter | null
}

export type TaskCreateWithoutProjectInput = {
  createdAt?: Date | string
  title: string
  time?: number
}

export type TaskCreateOrConnectWithoutprojectInput = {
  where: TaskWhereUniqueInput
  create: TaskCreateWithoutProjectInput
}

export type TaskUpdateWithWhereUniqueWithoutProjectInput = {
  where: TaskWhereUniqueInput
  data: TaskUpdateWithoutProjectInput
}

export type TaskUpdateManyWithWhereWithoutProjectInput = {
  where: TaskScalarWhereInput
  data: TaskUpdateManyMutationInput
}

export type TaskScalarWhereInput = {
  AND?: XOR<TaskScalarWhereInput, Enumerable<TaskScalarWhereInput>>
  OR?: XOR<TaskScalarWhereInput, Enumerable<TaskScalarWhereInput>>
  NOT?: XOR<TaskScalarWhereInput, Enumerable<TaskScalarWhereInput>>
  id?: XOR<IntFilter, number>
  createdAt?: XOR<DateTimeFilter, Date | string>
  title?: XOR<StringFilter, string>
  time?: XOR<IntFilter, number>
  projectId?: IntNullableFilter | number | null
}

export type TaskUpsertWithWhereUniqueWithoutProjectInput = {
  where: TaskWhereUniqueInput
  update: TaskUpdateWithoutProjectInput
  create: TaskCreateWithoutProjectInput
}

export type ProjectCreateWithoutTasksInput = {
  createdAt?: Date | string
  title: string
  description: string
  totalTime?: number
}

export type ProjectCreateOrConnectWithouttasksInput = {
  where: ProjectWhereUniqueInput
  create: ProjectCreateWithoutTasksInput
}

export type ProjectUpdateWithoutTasksInput = {
  createdAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  title?: XOR<string, StringFieldUpdateOperationsInput>
  description?: XOR<string, StringFieldUpdateOperationsInput>
  totalTime?: XOR<number, IntFieldUpdateOperationsInput>
}

export type ProjectUpsertWithoutTasksInput = {
  update: ProjectUpdateWithoutTasksInput
  create: ProjectCreateWithoutTasksInput
}

export type TaskUpdateWithoutProjectInput = {
  createdAt?: XOR<Date | string, DateTimeFieldUpdateOperationsInput>
  title?: XOR<string, StringFieldUpdateOperationsInput>
  time?: XOR<number, IntFieldUpdateOperationsInput>
}

/**
 * Batch Payload for updateMany & deleteMany
 */

export type BatchPayload = {
  count: number
}

/**
 * DMMF
 */
export declare const dmmf: DMMF.Document;
export {};
